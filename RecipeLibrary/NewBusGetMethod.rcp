#tags biz method

#ask service
Select the business service:
-
Accounting
Alerting
CRM
Gateway
GIS
JobDispatch
Manufacturing
Metrics
Security
Task
Tracking
VehicleManagement
#end

#ask entity=Entity type? e.g. Unit, Vehicle, Driver


#ask method=What is the new method's name?
#put spname=SP`method`

#ask req=What is the request type? e.g. IDRequest, GenericRequest...

#ask resp
What it the response type?
-
GetListResponse<`entity`>
GetItemResponse<`entity`>
SimpleResponse<T>
#end

#put rtype=`entity`

#if resp Simple
#ask rtype=What is the SimpleResponse<T> type <T>?
#put resp=SimpleResponse<`rtype`>
#endif

#put base=C:\TeamImarda\Imarda360\
#put file=`entity`


#new `base`Imarda360.Business\Services\Imarda`service`\Imarda`service`BusinessInterface\View\`file`\`file`.Extra.cs
using System;
using System.Collections.Generic;
using System.ServiceModel;
using FernBusinessBase;

namespace Imarda`service`Business
{
	partial interface IImarda`service`
	{
	}
}
#end

#put eof=}\s*}\s*\z

#before `eof` `base`Imarda360.Business\Services\Imarda`service`\Imarda`service`BusinessInterface\View\`file`\`file`.Extra.cs
		[OperationContract]
		`resp` `method`(`req` request);
	
#end


#new `base`Imarda360.Business\Services\Imarda`service`\Imarda`service`Business\Control\`file`\`file`.Extra.cs
using System;
using System.Collections.Generic;
using FernBusinessBase;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using FernBusinessBase.Errors;

namespace Imarda`service`Business
{
	partial class Imarda`service`
	{
	}
}

#end

#if resp GetItem
#put getter=GetItem<`entity`>
#else
#put getter=GetList<`entity`>
#endif

#if resp Simple
#put getter=GetValue<`entity`,`rtype`>
#endif

#copy `base`Imarda360.Business\Services\Imarda`service`\Imarda`service`Business\Control\`file`\`file`.Extra.cs

#before `eof` `base`Imarda360.Business\Services\Imarda`service`\Imarda`service`Business\Control\`file`\`file`.Extra.cs
		public `resp` `method`(`req` request)
		{
			try
			{
				bool includeInactive = request.HasSome(RetrievalOptions.IncludeInactive);
				Guid companyID = request.CompanyID;
				int topn = request.Get("TopN", int.MaxValue);
				...
				return ImardaDatabase.`getter`("`spname`", request.ID, includeInactive, companyID, topn);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<`resp`>(ex);
			}
		}

#end



#append C:\TeamImarda\Imarda360\Imarda360.DatabaseScripts\Imarda360.`service`\Imarda360.`service`All.sql

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[`spname`]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[`spname`]
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[`spname`]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE `spname`
	@IncludeInactive bit,
	@TopN int,
	@CompanyID uniqueidentifier
AS
	SELECT TOP(@TopN) * FROM `entity`
	WHERE CompanyID = @CompanyID
	AND (@IncludeInactive=1 OR Active=1)
	AND Deleted=0
'
END
GO

#end

#warn If new files were created, add them to csproj and source control