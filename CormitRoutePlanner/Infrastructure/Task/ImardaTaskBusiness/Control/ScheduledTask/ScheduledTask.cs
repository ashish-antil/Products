/***********************************************************************
Auto Generated Code

Generated by   : PROLIFICXNZ\maurice.verheijen
Date Generated : 24/06/2009 9:55 a.m.
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using FernBusinessBase;
using FernBusinessBase.Errors;
namespace ImardaTaskBusiness
{
	partial class ImardaTask
	{

		#region Get ScheduledTask
		public GetItemResponse<ScheduledTask> GetScheduledTask(IDRequest request)
		{
			try
			{
				return GenericGetEntity<ScheduledTask>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetItemResponse<ScheduledTask>>(ex);
			}
		}
		#endregion
		#region GetScheduledTaskUpdateCount
		

		public GetUpdateCountResponse GetScheduledTaskUpdateCount(GetUpdateCountRequest request)
		{
			GetUpdateCountResponse response = new GetUpdateCountResponse();

			try
			{
				response = GenericGetEntityUpdateCount<ScheduledTask>("ScheduledTask", request.TimeStamp, true, request.ID, request.LastRecordID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetUpdateCountResponse>(ex);
			}

			return response;
		}
		#endregion
		#region GetScheduledTaskListByTimeStamp
		

		public GetListResponse<ScheduledTask> GetScheduledTaskListByTimeStamp(GetListByTimestampRequest request)
		{
			try
			{
				return GenericGetEntityListByTimestamp<ScheduledTask>("ScheduledTask", request.TimeStamp, request.Cap, true, request.IncludeInactive, request.ID, request.LastRecordID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<ScheduledTask>>(ex);
			}
		}
		#endregion
		#region GetScheduledTaskList
		

		public GetListResponse<ScheduledTask> GetScheduledTaskList(IDRequest request)
		{
			try
			{
				return GenericGetEntityList<ScheduledTask>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<ScheduledTask>>(ex);
			}
		}
		#endregion
		#region Save ScheduledTask
		public BusinessMessageResponse SaveScheduledTask(SaveRequest<ScheduledTask> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				ScheduledTask entity = request.Item;
				BaseEntity.ValidateThrow(entity);
				 			   
				object [] properties=new object[]{			
						entity.ID,
						entity.ManagerID,
						entity.OwnerID,
						entity.Status,
						BusinessBase.ReadyDateForStorage(entity.StartTime),
						BusinessBase.ReadyDateForStorage(entity.DueTime),
						entity.Recurrence,
						entity.AlgorithmID,
						entity.ProgramID,
						entity.Arguments,
						entity.ExternalID,
						entity.CompanyID,
						entity.UserID,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.Deleted,
						entity.Active
						,entity.QueueID
						,entity.TimeZoneID
						,(int)entity.TimeOfDay.TotalSeconds
						,entity.Pause 
						,entity.TaskID 
#if EntityProperty_NoDate
						,entity.`field` //& `jira`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)  //& `jira`
#endif
					};
				response = GenericSaveEntity<ScheduledTask>(entity.CompanyID, entity.Attributes, properties);   //Review IM-3747
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region SaveScheduledTaskList
		

		public BusinessMessageResponse SaveScheduledTaskList(SaveListRequest<ScheduledTask> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				foreach (ScheduledTask entity in request.List)
				{
					BaseEntity.ValidateThrow(entity);
					object [] properties=new object[]
					{
						entity.ID,
						entity.ManagerID,
						entity.OwnerID,
						entity.Status,
						BusinessBase.ReadyDateForStorage(entity.StartTime),
						BusinessBase.ReadyDateForStorage(entity.DueTime),
						entity.Recurrence,
						entity.AlgorithmID,
						entity.ProgramID,
						entity.Arguments,
						entity.ExternalID,
						entity.CompanyID,
						entity.UserID,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.Deleted,
						entity.Active
						,entity.QueueID
						,entity.TimeZoneID
						,(int)entity.TimeOfDay.TotalSeconds
						,entity.Pause  
						,entity.TaskID  
#if EntityProperty_NoDate
						,entity.`field`  //& `jira`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)  //& `jira`
#endif
					};
					response = GenericSaveEntity<ScheduledTask>(entity.CompanyID, entity.Attributes, properties);   //Review IM-3747 				   
				}
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region Delete ScheduledTask
		

		public BusinessMessageResponse DeleteScheduledTask(IDRequest request)
		{
			try
			{
				return GenericDeleteEntity<ScheduledTask>("ScheduledTask", request.ID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}
		#endregion
	}
}


