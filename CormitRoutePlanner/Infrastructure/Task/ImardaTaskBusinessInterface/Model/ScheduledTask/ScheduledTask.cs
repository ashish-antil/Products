/***********************************************************************
Auto Generated Code

Generated by   : PROLIFICXNZ\maurice.verheijen
Date Generated : 24/06/2009 9:55 a.m.
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Data;
using System.Runtime.Serialization;
using FernBusinessBase;
using FernBusinessBase.Control;

namespace ImardaTaskBusiness 
{
	[DataContract]
	public class ScheduledTask : FullBusinessEntity
	{
		#region Constructor
		public ScheduledTask():base()
		{
		}
		#endregion

#if DEBUG
		public new Guid ID
		{
			get { return base.ID; }
			set { base.ID = EnsureSequential(value); }
		}
#endif

		[DataMember]
		public byte ManagerID { get; set; }

		[DataMember]
		public Guid OwnerID { get; set; }

		[DataMember]
		public byte Status { get; set; }

		[DataMember]
		public DateTime StartTime { get; set; }

		[DataMember]
		public DateTime DueTime { get; set; }

		public const int RecurrenceMaxLen = 80;
		[ValidLength(-1, RecurrenceMaxLen)]
		[DataMember]
		public string Recurrence { get; set; }

		[DataMember]
		public byte AlgorithmID { get; set; }

		[DataMember]
		public int ProgramID { get; set; }

		[DataMember]
		public string Arguments { get; set; }

		public const int ExternalIDMaxLen = 120;
		[ValidLength(-1, ExternalIDMaxLen)]
		[DataMember]
		public string ExternalID { get; set; }
		
		public const int QueueIDMaxLen = 12;
		[ValidLength(-1, QueueIDMaxLen)]
		[DataMember]
		public string QueueID { get; set; }

		public const int TimeZoneIDMaxLen = 40;
		[ValidLength(-1, TimeZoneIDMaxLen)]
		[DataMember]
		public string TimeZoneID { get; set; }

		[DataMember]
		public TimeSpan TimeOfDay { get; set; }

		public TimeSpan? FixedInterval()
		{
			return FixedInterval(Recurrence);
		}

		public static TimeSpan? FixedInterval(string recurrence)
		{
			// e.g. "F1:0" hourly , "F0:10" every 10 min, "F1.12:00" every 1 day+12hours, "F0:00:10" every 10 sec.
			if (recurrence == null || !recurrence.StartsWith("F") || recurrence.Length < 2) return null;
			TimeSpan ts;		// http://msdn.microsoft.com/en-us/library/se73z7b9.aspx
			if (TimeSpan.TryParse(recurrence.Substring(1), out ts)) return ts;
			return null;
		}

		
		[DataMember]
		public int Pause { get; set; }
		

		
		[DataMember]
		public Guid TaskID { get; set; }

		[DataMember]
		public string Owner { get; set; }

		[DataMember]
		public bool OwnerEnabled { get; set; }

		[DataMember]
		public string Company { get; set; }

#if EntityProperty
		//& `jira`
		[DataMember]
		public `cstype` `field` { get; set; }
		//. `jira`

#endif
		
		#region Methods
		public override void AssignData(IDataReader dr) 
		{
			base.AssignData(dr);
			ManagerID = GetValue<byte>(dr, "ManagerID");
			OwnerID = GetValue<Guid>(dr, "OwnerID");
			Status = GetValue<byte>(dr, "Status");
			StartTime = GetDateTime(dr, "StartTime");
			DueTime = GetDateTime(dr, "DueTime");
			Recurrence = GetValue<string>(dr, "Recurrence");
			AlgorithmID = GetValue<byte>(dr, "AlgorithmID");
			ProgramID = GetValue<int>(dr, "ProgramID");
			Arguments = GetValue<string>(dr, "Arguments");
			ExternalID = GetValue<string>(dr, "ExternalID");
			QueueID = GetValue<string>(dr, "QueueID");
			TimeZoneID = GetValue<string>(dr, "TimeZoneID");
			TimeOfDay = TimeSpan.FromSeconds(GetValue<int>(dr, "TimeOfDay"));
			Pause = GetValue<int>(dr, "Pause"); 
			TaskID = GetValue<Guid>(dr, "TaskID");
			if (HasColumn(dr, "Owner"))
			{
				Owner = GetValue<string>(dr, "Owner");
			}
			if (HasColumn(dr, "OwnerEnabled"))
			{
				OwnerEnabled = GetValue<int>(dr, "OwnerEnabled") == 1;
			}
			if (HasColumn(dr, "Company"))
			{
				Company = GetValue<string>(dr, "Company");
			}
#if EntityProperty_NoDate
			`field` = GetValue<`cstype`>(dr, "`field`"); //& `jira`
#endif
#if EntityProperty_Date
			`field` = GetDateTime(dr, "`field`"); //& `jira`
#endif
		

		}

		#endregion

		public override string ToString()
		{
			return string.Format("STask({0} {1} {2:s}...{3:s} owner={4} P{5} Active={6}", ID, (TaskStatus)Status, StartTime, DueTime, OwnerID, ProgramID, Active);
		}


		public ScheduledTask Copy(Guid newID)
		{
			var task = (ScheduledTask)MemberwiseClone();
			task.ID = newID;
			task.DateCreated = task.DateModified = DateTime.UtcNow;
			return task;
		}

		public TimeZoneInfo GetTimeZoneInfo()
		{
			return TimeZoneInfo.FindSystemTimeZoneById(TimeZoneID);
		}


	}
}

