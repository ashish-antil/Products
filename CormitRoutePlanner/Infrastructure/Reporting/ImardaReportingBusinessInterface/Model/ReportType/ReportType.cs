/***********************************************************************
Auto Generated Code

Generated by   : PROLIFICXNZ\maurice.verheijen
Date Generated : 24/06/2009 2:48 p.m.
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;
using FernBusinessBase;
using System.Data;
using FernBusinessBase.Control;

namespace ImardaReportBusiness
{
	[DataContract]
	public class ReportType : FullBusinessEntity
	{
		#region Constructor
		public ReportType()
			: base()
		{
		}
		#endregion

		#region Properties
		public const int NameMaxLen = 200;
		[ValidLength(0, NameMaxLen)]
		[DataMember]
		public string Name
		{ get; set; }
		public const int VersionMaxLen = 15;
		[ValidLength(-1, VersionMaxLen)]
		[DataMember]
		public string Version
		{ get; set; }
		public const int DescriptionMaxLen = 400;
		[ValidLength(-1, DescriptionMaxLen)]
		[DataMember]
		public string Description
		{ get; set; }
		//[DataMember]
		//public bool Template		 //# gs-352 now in FullBusinessEntity
		//{ get; set; }
		public const int InputFormUrlMaxLen = 120;
		[ValidLength(-1, InputFormUrlMaxLen)]
		[DataMember]
		public string InputFormUrl
		{ get; set; }
		[DataMember]
		public Guid OwnerID
		{ get; set; }
		public const int DeliveryMaxLen = 120;
		[ValidLength(-1, DeliveryMaxLen)]
		[DataMember]
		public string Delivery
		{ get; set; }
		public const int ExpiryRuleMaxLen = 50;
		[ValidLength(-1, ExpiryRuleMaxLen)]
		[DataMember]
		public string ExpiryRule
		{ get; set; }
		[DataMember]
		[DisplayFormat(null)]
		public DateTime DateCreatedDisplay
		{
			get { return DateCreated; }
			set { }
		}
		[DataMember]
		public string CategoryName
		{ get; set; }
		[DataMember]
		public Guid CategoryID
		{ get; set; }

		[DataMember]
		public int SortIndex
		{ get; set; }
#if EntityProperty
		[DataMember]
		public `cstype` `field` { get; set; }
#endif
		
		#endregion

		#region Methods
		public override void AssignData(IDataReader dr) 
		{
			base.AssignData(dr);
			Name = GetValue<string>(dr, "Name");
			Version = GetValue<string>(dr, "Version");
			Description = GetValue<string>(dr, "Description");
			InputFormUrl = GetValue<string>(dr, "InputFormUrl");
			IsTemplate = GetValue<bool>(dr, "Template");
			OwnerID = GetValue<Guid>(dr, "OwnerID");
			Delivery = GetValue<string>(dr, "Delivery");
			ExpiryRule = GetValue<string>(dr, "ExpiryRule");
			if (HasColumn(dr, "CategoryName"))
				CategoryName = GetValue<string>(dr, "CategoryName");
			if (HasColumn(dr, "CategoryID"))
				CategoryID = GetValue<Guid>(dr, "CategoryID");
			if (HasColumn(dr, "SortIndex"))
				SortIndex = GetValue<int>(dr, "SortIndex");
#if EntityProperty_NoDate
			`field` = GetValue<`cstype`>(dr, "`field`");
#endif
#if EntityProperty_Date
			`field` = GetDateTime(dr, "`field`");
#endif
		
		}

		#endregion

		public override string ToString()
		{
			return string.Format("ReportType(\"{0}\", v{1}, {2}, tmpl?{3}, owner={4})", Name, Version, InputFormUrl, IsTemplate, OwnerID);
		}
	}
}

