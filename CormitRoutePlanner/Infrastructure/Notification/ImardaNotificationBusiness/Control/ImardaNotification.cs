/***********************************************************************
Auto Generated Code.

Generated by   : IMARDAINC\Qian.Chen
Date Generated : 12/02/2010 3:40 p.m.
Copyright (c)2009 CodeGenerator 1.2
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using System.ServiceModel;
using FernBusinessBase;
using Imarda.Lib;


namespace ImardaNotificationBusiness
{
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)]
	public partial class ImardaNotification : FernBusinessBase.BusinessBase, IImardaNotification
	{
		public static readonly Guid InstanceID = SequentialGuid.NewDbGuid();
		public const string Description = "Imarda Notification";

		public GetUpdateCountResponseList GetUpdateObjectList(GetUpdateCountRequestList requestList)
		{
			GetUpdateCountResponseList responseList = new GetUpdateCountResponseList();
			responseList.List = new List<GetUpdateCountResponse>();

			if (requestList != null)
			{
				foreach (GetUpdateCountRequest req in requestList.List)
				{
					GetUpdateCountResponse response = new GetUpdateCountResponse();
					switch (req.TypeName)
					{
						case "EmailDraft": response = GetEmailDraftUpdateCount(req);
							break;
						case "EmailFailed": response = GetEmailFailedUpdateCount(req);
							break;
						case "EmailPending": response = GetEmailPendingUpdateCount(req);
							break;
						case "EmailSent": response = GetEmailSentUpdateCount(req);
							break;
						case "Notification": response = GetNotificationUpdateCount(req);
							break;
						case "SMSDraft": response = GetSMSDraftUpdateCount(req);
							break;
						case "SMSFailed": response = GetSMSFailedUpdateCount(req);
							break;
						case "SMSPending": response = GetSMSPendingUpdateCount(req);
							break;
						case "SMSSent": response = GetSMSSentUpdateCount(req);
							break;

						default:
							break;
					}
					if (response != null && response.Count > 0)
					{
						responseList.List.Add(new GetUpdateCountResponse(req.TypeName, response.Count, req.Priority));
					}
				}
			}
			return responseList;
		}

        public BusinessMessageResponse GenericSaveEntity<T>(Guid companyID, EntityAttributes ea, object[] properties)
            where T : FullBusinessEntity, new()
        {
            var adList = new List<AttributeDefinition>();
            var avList = new List<AttributeValue>();

            var response = GenericSaveEntity<T>(companyID, ea, out adList, out avList, properties);
            if (adList != null && adList.Count > 0)
            {
                var attributingService = ImardaProxyManager.Instance.IImardaAttributingProxy;
                ChannelInvoker.Invoke(delegate(out IClientChannel channel)
                {
                    channel = attributingService as IClientChannel;
                    var request = new SaveListRequest<FernBusinessBase.AttributeDefinition>(adList);
                    attributingService.SaveAttributeDefinitionList(request);
                });
            }

            if (avList != null && avList.Count > 0)
            {
                var attributingService = ImardaProxyManager.Instance.IImardaAttributingProxy;
                ChannelInvoker.Invoke(delegate(out IClientChannel channel)
                {
                    channel = attributingService as IClientChannel;
                    var request = new SaveListRequest<FernBusinessBase.AttributeValue>(avList);
                    attributingService.SaveAttributeValueList(request);
                });
            }
            return response;
        }
	}
}


