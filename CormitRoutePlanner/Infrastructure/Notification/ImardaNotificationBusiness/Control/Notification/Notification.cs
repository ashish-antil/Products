/***********************************************************************
Auto Generated Code.

Generated by   : IMARDAINC\Qian.Chen
Date Generated : 12/02/2010 3:40 p.m.
Copyright (c)2009 CodeGenerator 1.2
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using FernBusinessBase;
using FernBusinessBase.Errors;


namespace ImardaNotificationBusiness
{
	partial class ImardaNotification
	{
		public GetItemResponse<Notification> GetNotification(IDRequest request)
		{
			try
			{
				return GenericGetEntity<Notification>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetItemResponse<Notification>>(ex);
			}
		}

		public GetUpdateCountResponse GetNotificationUpdateCount(GetUpdateCountRequest request)
		{
			try
			{
				var response = GenericGetEntityUpdateCount<Notification>("Notification", request.TimeStamp, true, request.ID, request.LastRecordID);
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetUpdateCountResponse>(ex);
			}
		}

		public GetListResponse<Notification> GetNotificationListByTimeStamp(GetListByTimestampRequest request)
		{
			try
			{
				return GenericGetEntityListByTimestamp<Notification>("Notification", request.TimeStamp, request.Cap, true, request.ID, request.LastRecordID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Notification>>(ex);
			}
		}

		public GetListResponse<Notification> GetNotificationList(IDRequest request)
		{
			try
			{
				return GenericGetEntityList<Notification>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Notification>>(ex);
			}
		}

		public BusinessMessageResponse SaveNotification(SaveRequest<Notification> request)
		{
			try
			{
				Notification entity = request.Item;
				BaseEntity.ValidateThrow(entity);
				
				object[] properties = new object[]
				{
						entity.ID,
						entity.CompanyID,
						entity.UserID,
						entity.NotificationPlanID,
						entity.Description,
						entity.Status,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.Active,
						entity.Deleted
#if EntityProperty_NoDate
						,entity.`field`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)
#endif
					};
                var response = GenericSaveEntity<Notification>(entity.CompanyID, entity.Attributes, properties);  //Review IM-3747
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}

		public BusinessMessageResponse SaveNotificationList(SaveListRequest<Notification> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				foreach (Notification entity in request.List)
				{
					BaseEntity.ValidateThrow(entity);
					object[] properties = new object[]
					{
						entity.ID,
						entity.CompanyID,
						entity.UserID,
						entity.NotificationPlanID,
						entity.Description,
						entity.Status,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.Active,
						entity.Deleted
#if EntityProperty_NoDate
						,entity.`field`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)
#endif
					};
                    response = GenericSaveEntity<Notification>(entity.CompanyID, entity.Attributes, properties);  //Review IM-3747
				}
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}

		public BusinessMessageResponse DeleteNotification(IDRequest request)
		{
			try
			{
				return GenericDeleteEntity<Notification>("Notification", request.ID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}
	}
}

