/***********************************************************************
Auto Generated Code

Generated by   : adam-Laptop\adam
Date Generated : 28/04/2009 5:38 PM
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using FernBusinessBase;
using FernBusinessBase.Errors;
using ImardaCRMBusiness;
using System.ServiceModel;

namespace Imarda360Application.CRM
{
	partial class ImardaCRM
	{

		#region Get Role
		public GetItemResponse<Role> GetRole(IDRequest request)
		{
			try
			{
				GetItemResponse<Role> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetRole(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetItemResponse<Role>>(ex);
			}
		}
		#endregion
		#region GetRoleUpdateCount
		

		public GetUpdateCountResponse GetRoleUpdateCount(GetUpdateCountRequest request)
		{
			GetUpdateCountResponse response = new GetUpdateCountResponse();

			try
			{
				response = GenericGetEntityUpdateCount<Role>("Role", request.TimeStamp, true, request.ID, request.LastRecordID);
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetRoleUpdateCount(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetUpdateCountResponse>(ex);
			}
		}
		#endregion
		#region GetRoleListByTimeStamp
		

		public GetListResponse<Role> GetRoleListByTimeStamp(GetListByTimestampRequest request)
		{
			try
			{
				GetListResponse <Role> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetRoleListByTimeStamp(request);
				});
				return response; 				
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Role>>(ex);
			}
		}
		#endregion
		#region GetRoleList
		

		public GetListResponse<Role> GetRoleList(IDRequest request)
		{
			try
			{
				GetListResponse<Role> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetRoleList(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Role>>(ex);
			}
		}
		#endregion
		#region Save Role
		public BusinessMessageResponse SaveRole(SaveRequest<Role> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.SaveRole(request);
				});
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region SaveRoleList
		

		public BusinessMessageResponse SaveRoleList(SaveListRequest<Role> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.SaveRoleList(request);
				}); 			   
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region Delete Role
		

		public BusinessMessageResponse DeleteRole(IDRequest request)
		{
			try
			{
				BusinessMessageResponse  response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.DeleteRole(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}
		#endregion
	}
}


