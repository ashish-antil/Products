/***********************************************************************
Auto Generated Code

Generated by   : adam-Laptop\adam
Date Generated : 28/04/2009 5:38 PM
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using FernBusinessBase;
using FernBusinessBase.Errors;
using ImardaCRMBusiness;
using System.ServiceModel;

namespace Imarda360Application.CRM
{
	partial class ImardaCRM
	{

		#region Get EmailGroup
		public GetItemResponse<EmailGroup> GetEmailGroup(IDRequest request)
		{
			try
			{
				GetItemResponse<EmailGroup> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetEmailGroup(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetItemResponse<EmailGroup>>(ex);
			}
		}
		#endregion
		#region GetEmailGroupUpdateCount
		

		public GetUpdateCountResponse GetEmailGroupUpdateCount(GetUpdateCountRequest request)
		{
			GetUpdateCountResponse response = new GetUpdateCountResponse();

			try
			{
				response = GenericGetEntityUpdateCount<EmailGroup>("EmailGroup", request.TimeStamp, true, request.ID, request.LastRecordID);
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetEmailGroupUpdateCount(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetUpdateCountResponse>(ex);
			}
		}
		#endregion
		#region GetEmailGroupListByTimeStamp
		

		public GetListResponse<EmailGroup> GetEmailGroupListByTimeStamp(GetListByTimestampRequest request)
		{
			try
			{
				GetListResponse <EmailGroup> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetEmailGroupListByTimeStamp(request);
				});
				return response; 				
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<EmailGroup>>(ex);
			}
		}
		#endregion
		#region GetEmailGroupList
		

		public GetListResponse<EmailGroup> GetEmailGroupList(IDRequest request)
		{
			try
			{
				GetListResponse<EmailGroup> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetEmailGroupList(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<EmailGroup>>(ex);
			}
		}
		#endregion
		#region Save EmailGroup
		public BusinessMessageResponse SaveEmailGroup(SaveRequest<EmailGroup> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.SaveEmailGroup(request);
				});
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region SaveEmailGroupList
		

		public BusinessMessageResponse SaveEmailGroupList(SaveListRequest<EmailGroup> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.SaveEmailGroupList(request);
				}); 			   
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region Delete EmailGroup
		

		public BusinessMessageResponse DeleteEmailGroup(IDRequest request)
		{
			try
			{
				BusinessMessageResponse  response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.DeleteEmailGroup(request);
				});
				return response; 
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}
		#endregion
	}
}


