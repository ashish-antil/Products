/***********************************************************************
Auto Generated Code

Generated by   : adam-Laptop\adam
Date Generated : 28/04/2009 5:38 PM
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using FernBusinessBase;
using FernBusinessBase.Errors;
using ImardaCRMBusiness;
using System.ServiceModel;

namespace Imarda360Application.CRM
{
	partial class ImardaCRM
	{

		#region Get Person
		public GetItemResponse<Person> GetPerson(IDRequest request)
		{
			try
			{
				GetItemResponse<Person> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetPerson(request);
				});
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetItemResponse<Person>>(ex);
			}
		}
		#endregion
		#region GetPersonUpdateCount
		

		public GetUpdateCountResponse GetPersonUpdateCount(GetUpdateCountRequest request)
		{
			GetUpdateCountResponse response = new GetUpdateCountResponse();

			try
			{
				response = GenericGetEntityUpdateCount<Person>("Person", request.TimeStamp, true, request.ID, request.LastRecordID);
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetPersonUpdateCount(request);
				});
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetUpdateCountResponse>(ex);
			}
		}
		#endregion
		#region GetPersonListByTimeStamp
		

		public GetListResponse<Person> GetPersonListByTimeStamp(GetListByTimestampRequest request)
		{
			try
			{
				GetListResponse<Person> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetPersonListByTimeStamp(request);
				});
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Person>>(ex);
			}
		}
		#endregion
		#region GetPersonList
		

		public GetListResponse<Person> GetPersonList(IDRequest request)
		{
			try
			{
				GetListResponse<Person> response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.GetPersonList(request);
				});
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Person>>(ex);
			}
		}
		#endregion
		#region Save Person
		public BusinessMessageResponse SavePerson(SaveRequest<Person> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					channel = service as IClientChannel;
					response =  service.SavePerson(request);
				});
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region SavePersonList
		

		public BusinessMessageResponse SavePersonList(SaveListRequest<Person> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.SavePersonList(request);
				});
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region Delete Person
		

		public BusinessMessageResponse DeletePerson(IDRequest request)
		{
			try
			{
				BusinessMessageResponse response = null;
				var service = ImardaProxyManager.Instance.IImardaCRMProxy;
				ChannelInvoker.Invoke(delegate(out IClientChannel channel)
				{
					
					channel = service as IClientChannel;
					response =  service.DeletePerson(request);
				});
				return response;
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}
		#endregion
	}
}


