/***********************************************************************
Auto Generated Code

Generated by   : PROLIFICXNZ\adamson.delacruz
Date Generated : 27/04/2009 1:27 PM
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;
using FernBusinessBase;
using System.Data;
using FernBusinessBase.Control;

namespace ImardaCRMBusiness
{
	[DataContract]
	public class CompanyLocation : FullBusinessEntity
	{
		#region Constructor
		public CompanyLocation()
			: base()
		{
		}
		#endregion

		#region Properties
		public const int NameMaxLen = 250;
		[ValidLength(0, NameMaxLen)]
		[DataMember]
		public string Name { get; set; }

		public const int StreetAddressMaxLen = 250;
		[ValidLength(-1, StreetAddressMaxLen)]
		[DataMember]
		public string Address { get; set; }

		public const int SuburbMaxLen = 50;
		[ValidLength(-1, SuburbMaxLen)]
		[DataMember]
		public string Suburb { get; set; }

		public const int PostcodeMaxLen = 50;
		[ValidLength(-1, PostcodeMaxLen)]
		[DataMember]
		public string Postcode { get; set; }

		//& gs-1119
		public const int CityMaxLen = 50;
		[ValidLength(-1, CityMaxLen)]
		[DataMember]
		public string City { get; set; }

		public const int StateMaxLen = 50;
		[ValidLength(-1, StateMaxLen)]
		[DataMember]
		public string State { get; set; }

		public const int CountryMaxLen = 20;
		[ValidLength(-1, CountryMaxLen)]
		[DataMember]
		public string Country { get; set; }

		[DataMember]
		public int Type { get; set; }

		[DataMember]
		public bool IsPrimary { get; set; }

		[DataMember]
		public string Attention { get; set; }

		[DataMember]
		public string Description { get; set; }

		[DataMember]
		public string Notes { get; set; }
		//. gs-1119
	
#if EntityProperty
		[DataMember]
		public `cstype` `field` { get; set; }
#endif

		#endregion

		#region Methods
		public override void AssignData(IDataReader dr)
		{
			base.AssignData(dr);
			Name = GetValue<string>(dr, "Name");
			Address = GetValue<string>(dr, "StreetAddress");
			Suburb = GetValue<string>(dr, "Suburb");
			Postcode = GetValue<string>(dr, "Postcode");
			//& gs-1119
			City = GetValue<string>(dr, "City");
			State = GetValue<string>(dr, "State");
			Country = GetValue<string>(dr, "Country");
			Type = GetValue<int>(dr, "Type");
			IsPrimary = GetValue<bool>(dr, "IsPrimary");
			Attention = GetValue<string>(dr, "Attention");
			Description = GetValue<string>(dr, "Description");
			Notes = GetValue<string>(dr, "Notes");
			//. gs-1119
#if EntityProperty_NoDate
			`field` = GetValue<`cstype`>(dr, "`field`");
#endif
#if EntityProperty_Date
			`field` = GetDateTime(dr, "`field`");
#endif


		}

		#endregion


	}
}

