/***********************************************************************
Auto Generated Code

Generated by   : PROLIFICXNZ\adamson.delacruz
Date Generated : 27/04/2009 1:27 PM
Copyright @2009 CodeGenerator
***********************************************************************/

#region

using System;
using System.Runtime.Serialization;
using FernBusinessBase;
using System.Data;

#endregion

namespace ImardaCRMBusiness 
{
	[DataContract]
	public class Company : FullBusinessEntity 
	{
        public static readonly Guid UnspecifiedId = new Guid("11111111-1111-1111-1111-111111111111");
		public static readonly Guid Imarda  = new Guid("78c46d66-b886-44d0-a3c2-3aa9b12c4d98");
		public static readonly Guid Invalid = new Guid("44444444-4444-4444-4444-444444444444");

		#region Constructor
		public Company():base()
		{
		}
		#endregion
		
		#region Properties
		public const int NameMaxLen = 50;
		[ValidLength(-1, NameMaxLen)]
		[DataMember]
		public string Name 
		{get ;set ;}
		public const int StreetAddressMaxLen = 50;
		[ValidLength(-1, StreetAddressMaxLen)]
		[DataMember]
		public string StreetAddress 
		{get ;set ;}
		public const int SuburbMaxLen = 50;
		[ValidLength(-1, SuburbMaxLen)]
		[DataMember]
		public string Suburb 
		{get ;set ;}
		public const int StateMaxLen = 150;
		[ValidLength(-1, StateMaxLen)]
		[DataMember]
		public string State 
		{get ;set ;}
		public const int CityMaxLen = 150;
		[ValidLength(-1, CityMaxLen)]
		[DataMember]
		public string City
		{ get; set; }
		public const int PostCodeMaxLen = 50;
		[ValidLength(-1, PostCodeMaxLen)]
		[DataMember]
		public string PostCode 
		{get ;set ;}
		public const int DisplayNameMaxLen = 50;
		[ValidLength(-1, DisplayNameMaxLen)]
		[DataMember]
		public string DisplayName 
		{get ;set ;}
		public const int PhoneMaxLen = 50;
		[ValidLength(-1, PhoneMaxLen)]
		[DataMember]
		public string Phone 
		{get ;set ;}
		public const int FaxMaxLen = 50;
		[ValidLength(-1, FaxMaxLen)]
		[DataMember]
		public string Fax 
		{get ;set ;}
		public const int MobileMaxLen = 50;
		[ValidLength(-1, MobileMaxLen)]
		[DataMember]
		public string Mobile 
		{get ;set ;}
		public const int EmailMaxLen = 250;
		[ValidLength(-1, EmailMaxLen)]
		[DataMember]
		public string Email 
		{get ;set ;}
		public const int ServiceEmailMaxLen = 250;
		[ValidLength(-1, ServiceEmailMaxLen)]
		[DataMember]
		public string ServiceEmail 
		{get ;set ;}
		public const int RunProgramsMaxLen = 50;
		[ValidLength(-1, RunProgramsMaxLen)]
		[DataMember]
		public string RunPrograms 
		{get ;set ;}
		[DataMember]
		public Guid AccountManagerID 
		{get ;set ;}
		[DataMember]
		public int AutoLogoffPeriod 
		{get ;set ;}
		[DataMember]
		public int GracePeriod 
		{get ;set ;}
		[DataMember]
		public Byte MinorBreak 
		{get ;set ;}
		[DataMember]
		public Byte MajorBreak 
		{get ;set ;}
		[DataMember]
		public Int16 WorkPeriod 
		{get ;set ;}
		[DataMember]
		public Guid MapLocationID 
		{get ;set ;}
		public const int MasterPasswordMaxLen = 25;
		[ValidLength(-1, MasterPasswordMaxLen)]
		[DataMember]
		public string MasterPassword
		{ get; set; }
		[DataMember]
		public string Country { get; set; }
		[DataMember]
		public int FatigueRuleDefault { get; set; }
		public const int UnlockCodeMaxLen = 8;
		[ValidLength(-1, UnlockCodeMaxLen)]
		[DataMember]
		public string UnlockCode { get; set; }
		[DataMember]
		public string LinkID { get; set; }
		[DataMember]
		public Guid SolutionID { get; set; }
		[DataMember]
		public bool EMSEnabled { get; set; }
		[DataMember]
		public bool FatigueEnabled { get; set; }
		[DataMember]
		public bool JobDispatchEnabled { get; set; }
		[DataMember]
		public int ClientType { get; set; }
		[DataMember]
		public string TimeZone	{ get; set; }

		//not persisted
		[DataMember]
		public int NrFleets { get; set; }
		[DataMember]
		public int NrUsers { get; set; }
		[DataMember]
		public int NrVehicles { get; set; }
		[DataMember]
		public string Owner { get; set; } //name of parent in Path
#if EntityProperty
		[DataMember]
		public `cstype` `field` { get; set; }
#endif
		
		#endregion

		#region Methods
		public override void AssignData(IDataReader dr) 
		{
			base.AssignData(dr);
			Name = GetValue<string>(dr, "Name");
			StreetAddress = GetValue<string>(dr, "StreetAddress");
			Suburb = GetValue<string>(dr, "Suburb");
			State = GetValue<string>(dr, "State");
			if (HasColumn(dr, "City"))
				City = GetValue<string>(dr, "City");
			PostCode = GetValue<string>(dr, "PostCode");
			DisplayName = GetValue<string>(dr, "DisplayName");
			Phone = GetValue<string>(dr, "Phone");
			Fax = GetValue<string>(dr, "Fax");
			Mobile = GetValue<string>(dr, "Mobile");
			Email = GetValue<string>(dr, "Email");
			ServiceEmail = GetValue<string>(dr, "ServiceEmail");
			RunPrograms = GetValue<string>(dr, "RunPrograms");
			AccountManagerID = GetValue<Guid>(dr, "AccountManagerID");
			AutoLogoffPeriod = GetValue<int>(dr, "AutoLogoffPeriod");
			GracePeriod = GetValue<int>(dr, "GracePeriod");
			MinorBreak = GetValue<Byte>(dr, "MinorBreak");
			MajorBreak = GetValue<Byte>(dr, "MajorBreak");
			WorkPeriod = GetValue<Int16>(dr, "WorkPeriod");
			MapLocationID = GetValue<Guid>(dr, "MapLocationID");
			MasterPassword = GetValue<string>(dr, "MasterPassword");
			Country = GetValue<string>(dr, "Country");
			FatigueRuleDefault = GetValue<int>(dr, "FatigueRuleDefault");
			UnlockCode = GetValue<string>(dr, "UnlockCode");
			LinkID = GetValue<string>(dr, "LinkID");
			SolutionID = GetValue<Guid>(dr, "SolutionID");
			EMSEnabled = GetValue<bool>(dr, "EMSEnabled");
			FatigueEnabled = GetValue<bool>(dr, "FatigueEnabled");
			JobDispatchEnabled = GetValue<bool>(dr, "JobDispatchEnabled");
			if (HasColumn(dr, "ClientType"))
				ClientType = GetValue<int>(dr, "ClientType");
			if (HasColumn(dr, "TimeZone"))
				TimeZone = GetValue<string>(dr, "TimeZone");

			//values provided by [SPGetCompanyFilteredExtent]
			if (HasColumn(dr, "NrFleets"))
				NrFleets =GetValue<int>(dr, "NrFleets");
			if (HasColumn(dr, "NrVehicles"))
				NrVehicles = GetValue<int>(dr, "NrVehicles");
			if (HasColumn(dr, "NrUsers"))
				NrUsers = GetValue<int>(dr, "NrUsers");
			if (HasColumn(dr, "Owner"))
				Owner = GetValue<string>(dr, "Owner");

#if EntityProperty_NoDate
			`field` = GetValue<`cstype`>(dr, "`field`");
#endif
#if EntityProperty_Date
			`field` = GetDateTime(dr, "`field`");
#endif
		
		}

		#endregion

	
	}
}

