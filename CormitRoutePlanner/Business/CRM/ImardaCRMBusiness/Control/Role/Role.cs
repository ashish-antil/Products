/***********************************************************************
Auto Generated Code

Generated by   : PROLIFICXNZ\adamson.delacruz
Date Generated : 27/04/2009 1:27 PM
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using FernBusinessBase;
using FernBusinessBase.Errors;
namespace ImardaCRMBusiness
{
	partial class ImardaCRM
	{

		#region Get Role
		public GetItemResponse<Role> GetRole(IDRequest request)
		{
			try
			{
				return GenericGetEntity<Role>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetItemResponse<Role>>(ex);
			}
		}
		#endregion
		#region GetRoleUpdateCount
		

		public GetUpdateCountResponse GetRoleUpdateCount(GetUpdateCountRequest request)
		{
			GetUpdateCountResponse response = new GetUpdateCountResponse();

			try
			{
				response = GenericGetEntityUpdateCount<Role>("Role", request.TimeStamp, true, request.ID, request.LastRecordID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetUpdateCountResponse>(ex);
			}

			return response;
		}
		#endregion
		#region GetRoleListByTimeStamp
		

		public GetListResponse<Role> GetRoleListByTimeStamp(GetListByTimestampRequest request)
		{
			try
			{
				return GenericGetEntityListByTimestamp<Role>("Role", request.TimeStamp, request.Cap, true, request.IncludeInactive, request.ID, request.LastRecordID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Role>>(ex);
			}
		}
		#endregion
		#region GetRoleList
		

		public GetListResponse<Role> GetRoleList(IDRequest request)
		{
			try
			{
				return GenericGetEntityList<Role>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<Role>>(ex);
			}
		}
		#endregion
		#region Save Role
		public BusinessMessageResponse SaveRole(SaveRequest<Role> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				Role entity = request.Item;
				BaseEntity.ValidateThrow(entity);
				 			   
				object [] properties=new object[]{			entity.ID,
						entity.Active,
						entity.Deleted,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.CompanyID,
						entity.UserID,
						entity.PersonID,
						entity.RoleTypeID
#if EntityProperty_NoDate
						,entity.`field`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)
#endif
					};
				response = GenericSaveEntity<Role>(entity.CompanyID, entity.Attributes, properties);   //Review IM-3747
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region SaveRoleList
		

		public BusinessMessageResponse SaveRoleList(SaveListRequest<Role> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				foreach (Role entity in request.List)
				{
					BaseEntity.ValidateThrow(entity);
					object [] properties=new object[]
					{
						entity.ID,
						entity.Active,
						entity.Deleted,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.CompanyID,
						entity.UserID,
						entity.PersonID,
						entity.RoleTypeID
#if EntityProperty_NoDate
						,entity.`field`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)
#endif
					};
					response = GenericSaveEntity<Role>(entity.CompanyID, entity.Attributes, properties);   //Review IM-3747 				   
				}
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region Delete Role
		

		public BusinessMessageResponse DeleteRole(IDRequest request)
		{
			try
			{
				return GenericDeleteEntity<Role>("Role", request.ID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}
		#endregion
	}
}


