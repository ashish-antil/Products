/***********************************************************************
Auto Generated Code

Generated by   : PROLIFICXNZ\adamson.delacruz
Date Generated : 27/04/2009 1:27 PM
Copyright @2009 CodeGenerator
***********************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using FernBusinessBase;
using FernBusinessBase.Errors;
namespace ImardaCRMBusiness
{
	partial class ImardaCRM
	{

		#region Get CompanyLocation
		public GetItemResponse<CompanyLocation> GetCompanyLocation(IDRequest request)
		{
			try
			{
				return GenericGetEntity<CompanyLocation>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetItemResponse<CompanyLocation>>(ex);
			}
		}
		#endregion
		#region GetCompanyLocationUpdateCount


		public GetUpdateCountResponse GetCompanyLocationUpdateCount(GetUpdateCountRequest request)
		{
			GetUpdateCountResponse response = new GetUpdateCountResponse();

			try
			{
				response = GenericGetEntityUpdateCount<CompanyLocation>("CompanyLocation", request.TimeStamp, true, request.ID, request.LastRecordID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetUpdateCountResponse>(ex);
			}

			return response;
		}
		#endregion
		#region GetCompanyLocationListByTimeStamp


		public GetListResponse<CompanyLocation> GetCompanyLocationListByTimeStamp(GetListByTimestampRequest request)
		{
			try
			{
				return GenericGetEntityListByTimestamp<CompanyLocation>("CompanyLocation", request.TimeStamp, request.Cap, true, request.IncludeInactive, request.ID, request.LastRecordID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<CompanyLocation>>(ex);
			}
		}
		#endregion
		#region GetCompanyLocationList


		public GetListResponse<CompanyLocation> GetCompanyLocationList(IDRequest request)
		{
			try
			{
				return GenericGetEntityList<CompanyLocation>(request);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle<GetListResponse<CompanyLocation>>(ex);
			}
		}
		#endregion
		#region Save CompanyLocation
		public BusinessMessageResponse SaveCompanyLocation(SaveRequest<CompanyLocation> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				CompanyLocation entity = request.Item;
				BaseEntity.ValidateThrow(entity);

				object[] properties = new object[]{			
						entity.ID,
						entity.Active,
						entity.Deleted,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.CompanyID,
						entity.UserID,
						entity.Name,
						entity.Address,
						entity.Suburb,
						entity.Postcode
						//& gs-1119
						,entity.City
						,entity.State
						,entity.Country
						,entity.Type
						,entity.IsPrimary
						,entity.Attention
						,entity.Description
						,entity.Notes
						//. gs-1119
#if EntityProperty_NoDate
						,entity.`field`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)
#endif
					};
                response = GenericSaveEntity<CompanyLocation>(entity.CompanyID, entity.Attributes, properties);    //Review IM-3747
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region SaveCompanyLocationList


		public BusinessMessageResponse SaveCompanyLocationList(SaveListRequest<CompanyLocation> request)
		{
			var response = new BusinessMessageResponse();
			try
			{
				foreach (CompanyLocation entity in request.List)
				{
					BaseEntity.ValidateThrow(entity);
					object[] properties = new object[]
					{
						entity.ID,
						entity.Active,
						entity.Deleted,
						entity.DateCreated,
						entity.DateModified = DateTime.UtcNow,
						entity.CompanyID,
						entity.UserID,
						entity.Name,
						entity.Address,
						entity.Suburb,
						entity.Postcode
						//& gs-1119
						,entity.City
						,entity.State
						,entity.Country
						,entity.Type
						,entity.IsPrimary
						,entity.Attention
						,entity.Description
						,entity.Notes
						//. gs-1119
#if EntityProperty_NoDate
						,entity.`field`
#endif
#if EntityProperty_Date
						,BusinessBase.ReadyDateForStorage(entity.`field`)
#endif
					};
                    response = GenericSaveEntity<CompanyLocation>(entity.CompanyID, entity.Attributes, properties);    //Review IM-3747
				}
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
			return response;
		}
		#endregion
		#region Delete CompanyLocation


		public BusinessMessageResponse DeleteCompanyLocation(IDRequest request)
		{
			try
			{
				return GenericDeleteEntity<CompanyLocation>("CompanyLocation", request.ID);
			}
			catch (Exception ex)
			{
				return ErrorHandler.Handle(ex);
			}
		}
		#endregion
	}
}


